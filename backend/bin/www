#!/usr/bin/env node
"use strict";

/**
 * @param o
 * @returns {*}
 * Freezes the Object to avoid further changes
 */
function deepFreeze(o) {
  Object.freeze(o);
  Object.getOwnPropertyNames(o).forEach(function(prop) {
    if (o.hasOwnProperty(prop)
        && o[prop] !== null
        && (typeof o[prop] === "object" || typeof o[prop] === "function")
        && !Object.isFrozen(o[prop])) {
      deepFreeze(o[prop]);
    }
  });
  return o;
}

/**
 * Custom logger setting it to global variable
 */
global.logger = deepFreeze(require('../logger'));

/**
 * A small in memory cache for storing the active tokens for session based authentication
 * { sessionId: { updatedTime: Date.toISOString(), createdTime: Date } }
 * Deleting the keys which are inactive for more that 10 minutes
 */
global.localCache = {};

/**
 * Register configFile to global variable for easy access
 */
const configFile = require('../config');
global.config = deepFreeze(configFile);

/**
 * Register custom error to global variable
 */
global.customError = deepFreeze(require('../middlewares/customErrorMessage'));

/**
 * Executing cron files
 */
require('../models/cron');

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  logger.info(`[ INFO ] server is listening on :`, port);
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
